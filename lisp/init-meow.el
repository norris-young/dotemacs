(use-package meow
  :demand t
  :custom (meow-keypad-self-insert-undefined nil)
  :config
  (defvar meow-escape-key-sequence (kbd "jj"))
  (defvar meow-escape-delay 0.2)

  (defun meow-escape-p ()
    (and meow-escape-key-sequence
         (equal (string-to-char (this-command-keys)) (elt meow-escape-key-sequence 0))))

  (defun meow-escape-insert ()
    (condition-case err
        (progn (self-insert-command 1) t)
      ('error nil)))

  (defun meow-escape-pre-command-hook ()
    "meow escape pre-command hook."
    (with-demoted-errors "meow escape: Error %S"
      (when (meow-escape-p)
        (let* ((modified (buffer-modified-p))
               (inserted (meow-escape-insert))
               (fkey (elt meow-escape-key-sequence 0))
               (skey (elt meow-escape-key-sequence 1))
               (evt (read-event nil nil meow-escape-delay)))
          (when inserted (message "delete") (delete-char -1))
          (set-buffer-modified-p modified)
          (cond
           ((and (characterp evt)
                 (char-equal evt skey))
            (setq this-command #'meow-escape-or-normal-modal)
            (setq this-original-command #'meow-escape-or-normal-modal))
           ((null evt))
           (t (setq unread-command-events
                    (append unread-command-events (list evt)))))))))
  (add-hook 'meow-insert-enter-hook (lambda ()
                                      (add-hook 'pre-command-hook 'meow-escape-pre-command-hook)))
  (add-hook 'meow-insert-exit-hook (lambda ()
                                     (remove-hook 'pre-command-hook 'meow-escape-pre-command-hook)))

  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '(";" . meow-reverse)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("h" . meow-left)
     '("l" . meow-right)
     '("J" . meow-next-expand)
     '("K" . meow-prev-expand)
     '("H" . meow-left-expand)
     '("L" . meow-right-expand)
     '("n" . meow-search)
     '("v" . meow-visit)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC SPC for M-x quickly
     '("SPC" . counsel-M-x)
     ;; SPC j/k/h/l will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     '("h" . "H-h")
     '("l" . "H-l")
     '("J" . "H-J")
     '("K" . "H-K")
     '("H" . "H-H")
     '("L" . "H-L")
     '("n" . "H-n")
     '("v" . "H-v")
     '(";" . "H-;")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . winum-select-window-1)
     '("2" . winum-select-window-2)
     '("3" . winum-select-window-3)
     '("4" . winum-select-window-4)
     '("5" . winum-select-window-5)
     '("6" . winum-select-window-6)
     '("7" . winum-select-window-7)
     '("8" . winum-select-window-8)
     '("9" . winum-select-window-9)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("DEL" . ignore)
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  (meow-setup)
  (setq meow-keypad-ctrl-meta-prefix ?.
        meow-keypad-literal-prefix   ?,
        meow--kbd-kill-region        "C-S-k"
        meow-keypad-start-keys       '((?c . ?c) (?b . ?h) (?x. ?x) (?w . ?w) (?s . ?s) (?t . ?t)))

  (meow-global-mode 1))
